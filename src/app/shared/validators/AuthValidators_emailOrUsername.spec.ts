// Generated by Qodo Gen

import {AuthValidators} from './auth-validators';
import {AbstractControl} from '@angular/forms';

describe('emailOrUsername', () => {

    // Valid email address returns null validation error
  // Valid email format returns null validation error
  it('should return null when email format is valid', () => {
    const control = { value: 'test@email.com' } as AbstractControl;
    const validator = AuthValidators.emailOrUsername();
    const result = validator(control);
    expect(result).toBeNull();
  });

    // Email with multiple @ symbols should be invalid
    it('should return error when email contains multiple @ symbols', () => {
      const control = { value: 'test@multiple@email.com'} as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toEqual({ usernameLength: 'El username debe tener entre 2 y 25 caracteres' });
    });

    // Username between 2-25 characters returns null validation error
    it('should return null when username is between 2 and 25 characters', () => {
      const control = { value: 'validUser' } as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toBeNull();
    });

    // Username with exactly 2 characters is valid
    it('should return null when username has exactly 2 characters', () => {
      const control = { value: 'ab' } as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toBeNull();
    });

    // Email without domain extension should be invalid
    it('should return error when email lacks domain extension', () => {
      const control = { value: 'test@domain' } as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toEqual({ required: true });
    });

    // Username with 26 characters should return length error
    it('should return length error when username is 26 characters long', () => {
      const control = { value: 'a'.repeat(26) } as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toEqual({ usernameLength: 'El username debe tener entre 2 y 25 caracteres' });
    });

    // Email with spaces should be invalid
    it('should return error when email contains spaces', () => {
      const control = { value: 'test @email.com' } as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toEqual({ required: true });
    });

    // Email without @ symbol should be treated as username
    it('should return usernameLength error when email lacks @ symbol', () => {
      const control = { value: 'testemail.com' } as AbstractControl;
      const validator = AuthValidators.emailOrUsername();
      const result = validator(control);
      expect(result).toEqual({ usernameLength: 'El username debe tener entre 2 y 25 caracteres' });
    });
});
